import fs from "fs/promises";
import path from "path";
import { glob } from "glob";
import matter from "gray-matter";

const contentDir = path.join(process.cwd(), "content");
const outputFile = path.join(process.cwd(), "lib", "mdi-icon-map.ts");
const iconPrefix = "Mdi";
const virtualPrefix = "~icons/mdi";

async function generateMdiIconMap() {
  console.log("Scanning for MDI icons...");
  const files = await glob("**/*.mdx", { cwd: contentDir });
  const iconNames = new Set();

  for (const file of files) {
    const filePath = path.join(contentDir, file);
    const fileContent = await fs.readFile(filePath, "utf8");
    const { data } = matter(fileContent);

    if (
      data.icon &&
      typeof data.icon === "string" &&
      data.icon.startsWith(iconPrefix)
    ) {
      const iconName = data.icon.substring(iconPrefix.length);
      if (iconName) {
        iconNames.add(iconName);
      }
    }
  }

  const sortedNames = Array.from(iconNames).sort();
  console.log(`Found MDI icons: ${sortedNames.join(", ") || "None"}`);

  let outputContent = `// This file is auto-generated by scripts/generate-icon-map.mjs
// Do not edit this file directly.

import type { FunctionComponent, SVGProps } from 'react';

`;

  if (sortedNames.length === 0) {
    outputContent += "export const mdiIcons = {};\n";
  } else {
    sortedNames.forEach((name) => {
      const importName = `${iconPrefix}${name}`;
      const importPath = `${virtualPrefix}/${name.toLowerCase()}`;
      outputContent += `import ${importName} from '${importPath}';\n`;
    });

    outputContent += "\n";
    outputContent +=
      "export const mdiIcons: Record<string, FunctionComponent<SVGProps<SVGSVGElement>>> = {\n";

    sortedNames.forEach((name) => {
      const importName = `${iconPrefix}${name}`;
      outputContent += `  ${name}: ${importName},\n`;
    });

    outputContent += "};\n";
  }

  await fs.mkdir(path.dirname(outputFile), { recursive: true });
  await fs.writeFile(outputFile, outputContent);
  console.log(`MDI icon map generated at ${outputFile}`);
}

generateMdiIconMap().catch((err) => {
  console.error("Error generating MDI icon map:", err);
  process.exit(1);
});
